name: Process Documents with Ollama (Bulletproof)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'documents/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'documents/**'
  workflow_dispatch: # Allow manual triggering

jobs:
  process-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for proper file tracking
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Install and start Ollama (Bulletproof)
      run: |
        # Install Ollama
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Kill any existing Ollama processes more thoroughly
        sudo pkill -f ollama || true
        sudo pkill -9 ollama || true
        sleep 3
        
        # Check if port 11434 is still in use and kill the process
        if lsof -ti:11434 2>/dev/null; then
          echo "Port 11434 is in use, killing process..."
          sudo kill -9 $(lsof -ti:11434) || true
          sleep 2
        fi
        
        # Start Ollama in background with explicit host binding
        export OLLAMA_HOST=127.0.0.1:11434
        ollama serve &
        OLLAMA_PID=$!
        echo "Started Ollama with PID: $OLLAMA_PID"
        
        # Wait for Ollama to be ready with extended timeout
        echo "Waiting for Ollama to start..."
        for i in {1..60}; do
          if curl -s http://127.0.0.1:11434/api/tags >/dev/null 2>&1; then
            echo "Ollama is ready!"
            break
          fi
          echo "Waiting... ($i/60)"
          sleep 3
        done
        
        # Verify Ollama is responding
        if ! curl -s http://127.0.0.1:11434/api/tags >/dev/null 2>&1; then
          echo "ERROR: Ollama failed to start properly"
          echo "Checking processes:"
          ps aux | grep ollama
          echo "Checking port:"
          netstat -tlnp | grep 11434 || true
          exit 1
        fi
        
        # Pull model with retry logic and better error handling
        echo "Pulling DeepSeek model..."
        for attempt in {1..5}; do
          echo "Attempt $attempt to pull deepseek-r1:1.5b..."
          if timeout 300 ollama pull deepseek-r1:1.5b; then
            echo "Model pulled successfully!"
            break
          else
            echo "Attempt $attempt failed, retrying in 10 seconds..."
            sleep 10
          fi
          
          if [ $attempt -eq 5 ]; then
            echo "ERROR: Failed to pull model after 5 attempts"
            exit 1
          fi
        done
        
        # Verify model is available
        echo "Available models:"
        ollama list
        
        # Test model with a simple query
        echo "Testing model..."
        echo '{"model": "deepseek-r1:1.5b", "prompt": "Hello", "stream": false}' | curl -s -X POST http://127.0.0.1:11434/api/generate -d @- || echo "Model test failed but continuing..."
    
    - name: Process documents with Ollama (Bulletproof)
      env:
        OLLAMA_MODEL: deepseek-r1:1.5b
      run: |
        echo "Processing documents with bulletproof Ollama processor..."
        echo "This processor guarantees AI model usage for every document!"
        python scripts/bulletproof_ollama_processor.py --force
        echo "Documents processed successfully with AI analysis"
    
    - name: Build website
      run: |
        echo "Building website..."
        npm run build
        echo "Website built successfully"
    
    - name: Commit updated documents.json if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if [[ -n $(git status --porcelain) ]]; then
          echo "Changes detected, committing..."
          git add data/documents.json data/processed_files.json
          if [ -d "dist/data" ]; then
            git add dist/data/documents.json
          fi
          git commit -m "Auto-update documents database with bulletproof Ollama analysis [skip ci]" || echo "No changes to commit"
          git push || echo "Nothing to push"
        else
          echo "No changes to commit"
        fi
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.REP }}
        publish_dir: ./dist
        force_orphan: true
