name: Unified Document Processing with Ollama

on:
  push:
    branches: [ main, master ]
    paths:
      - 'documents/**'
      - 'scripts/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'documents/**'
  workflow_dispatch:
    inputs:
      force_reprocess:
        description: 'Force reprocess all documents'
        required: false
        default: false
        type: boolean
  schedule:
    # Run daily at 2 AM UTC to catch any missed documents
    - cron: '0 2 * * *'

# Prevent multiple instances from running simultaneously
concurrency:
  group: document-processing
  cancel-in-progress: false

jobs:
  process-documents:
    runs-on: ubuntu-latest
    timeout-minutes: 350  # 5 hours 50 minutes (under 6-hour limit)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.REP }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install and configure Ollama
      run: |
        # Install Ollama
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Generate a unique port to avoid conflicts
        OLLAMA_PORT=$((11434 + $RANDOM % 1000))
        echo "Selected Ollama port: $OLLAMA_PORT"
        
        # Comprehensive cleanup of existing Ollama processes
        echo "Cleaning up any existing Ollama processes..."
        sudo pkill -f ollama || true
        sudo pkill -9 ollama || true
        sudo killall ollama || true
        sudo killall -9 ollama || true
        
        # Wait for cleanup to complete
        sleep 5
        
        # Check and free up ports
        for port in 11434 $OLLAMA_PORT; do
          if sudo lsof -ti:$port 2>/dev/null; then
            echo "Port $port is in use, force killing processes..."
            sudo kill -9 $(sudo lsof -ti:$port) || true
            sleep 2
          fi
        done
        
        # Configure Ollama environment
        export OLLAMA_HOST=127.0.0.1:$OLLAMA_PORT
        export OLLAMA_ORIGINS="*"
        
        # Start Ollama service
        echo "Starting Ollama on port $OLLAMA_PORT..."
        ollama serve &
        OLLAMA_PID=$!
        echo "Started Ollama with PID: $OLLAMA_PID"
        
        # Save configuration for subsequent steps
        echo "OLLAMA_PORT=$OLLAMA_PORT" >> $GITHUB_ENV
        echo "OLLAMA_HOST=127.0.0.1:$OLLAMA_PORT" >> $GITHUB_ENV
        echo "OLLAMA_PID=$OLLAMA_PID" >> $GITHUB_ENV
        
        # Wait for Ollama to be ready with extended timeout
        echo "Waiting for Ollama to start..."
        for i in {1..60}; do
          if curl -s http://127.0.0.1:$OLLAMA_PORT/api/tags >/dev/null 2>&1; then
            echo "Ollama is ready on port $OLLAMA_PORT!"
            break
          fi
          echo "Waiting for Ollama... ($i/60)"
          sleep 3
        done
        
        # Verify Ollama is responding
        if ! curl -s http://127.0.0.1:$OLLAMA_PORT/api/tags >/dev/null 2>&1; then
          echo "ERROR: Ollama failed to start on port $OLLAMA_PORT"
          echo "Process status:"
          ps aux | grep ollama || true
          echo "Port status:"
          sudo netstat -tlnp | grep $OLLAMA_PORT || true
          exit 1
        fi
        
        # Pull Mistral model with retry logic
        echo "Pulling Mistral model..."
        for attempt in {1..3}; do
          echo "Attempt $attempt to pull mistral:7b..."
          if timeout 300 ollama pull mistral:7b; then
            echo "Mistral model pulled successfully!"
            break
          else
            echo "Attempt $attempt failed, retrying in 10 seconds..."
            sleep 10
          fi
          
          if [ $attempt -eq 3 ]; then
            echo "ERROR: Failed to pull model after 3 attempts"
            exit 1
          fi
        done
        
        # Verify model availability
        echo "Available models:"
        ollama list
        
        # Test model functionality
        echo "Testing Mistral model..."
        echo '{"model": "mistral:7b", "prompt": "Hello", "stream": false}' | \
          curl -s -X POST http://127.0.0.1:$OLLAMA_PORT/api/generate -d @- | \
          jq -r '.response' || echo "Model test completed"

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Process documents incrementally
      env:
        OLLAMA_MODEL: mistral:7b
        FORCE_REPROCESS: ${{ github.event.inputs.force_reprocess }}
      run: |
        echo "Starting document processing..."
        echo "Force reprocess: ${FORCE_REPROCESS:-false}"
        echo "Ollama host: $OLLAMA_HOST"
        
        # Run the incremental processor
        python3 scripts/incremental_ollama_processor.py
        
        echo "Document processing completed"

    - name: Build website
      run: |
        echo "Building website..."
        npm run build
        echo "Website built successfully"

    - name: Final commit and status check
      run: |
        # Check if there are any remaining uncommitted changes
        if [[ -n $(git status --porcelain) ]]; then
          echo "Found uncommitted changes, committing final state..."
          git add data/ dist/
          git commit -m "Final update: document processing batch complete [skip ci]" || echo "No final changes to commit"
          git push || echo "Nothing to push"
        else
          echo "All changes already committed during incremental processing"
        fi
        
        # Final status report
        echo "=== FINAL STATUS ==="
        echo "Documents directory:"
        ls -la documents/ | head -10
        echo "..."
        echo "Total PDF files: $(find documents/ -name '*.pdf' | wc -l)"
        
        if [ -f "data/documents.json" ]; then
          echo "documents.json: $(jq length data/documents.json) documents"
        else
          echo "ERROR: documents.json not found!"
        fi
        
        if [ -f "data/processed_files.json" ]; then
          echo "processed_files.json: $(jq length data/processed_files.json) files tracked"
        else
          echo "ERROR: processed_files.json not found!"
        fi

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.REP }}
        publish_dir: ./dist
        force_orphan: true

    - name: Cleanup Ollama
      if: always()
      run: |
        echo "Cleaning up Ollama processes..."
        if [ -n "$OLLAMA_PID" ]; then
          kill $OLLAMA_PID || true
        fi
        sudo pkill -f ollama || true
        sudo pkill -9 ollama || true
        echo "Cleanup completed"
