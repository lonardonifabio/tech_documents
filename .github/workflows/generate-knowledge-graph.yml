name: Generate Knowledge Graph

on:
  push:
    paths:
      - 'documents/**'
      - 'data/documents.json'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all embeddings'
        required: false
        default: false
        type: boolean

jobs:
  generate-knowledge-graph:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Check for document changes
      id: check_changes
      run: |
        if [ "${{ github.event.inputs.force_regenerate }}" = "true" ]; then
          echo "force_regenerate=true" >> $GITHUB_OUTPUT
          echo "🔄 Force regeneration requested"
        else
          # Check if documents.json or any documents have changed
          if git diff --name-only HEAD~1 HEAD | grep -E "(documents/|data/documents\.json)" > /dev/null; then
            echo "documents_changed=true" >> $GITHUB_OUTPUT
            echo "📄 Document changes detected"
          else
            echo "documents_changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No document changes detected"
          fi
        fi

    - name: Generate knowledge graph data
      if: steps.check_changes.outputs.documents_changed == 'true' || steps.check_changes.outputs.force_regenerate == 'true'
      run: |
        echo "🕸️ Generating knowledge graph data..."
        echo "🕸️ Knowledge Graph Generator Starting..."
        
        # Check if documents.json exists
        if [ ! -f "data/documents.json" ]; then
          echo "Documents file not found: data/documents.json"
          echo "Available files in data directory:"
          ls -la data/ || echo "data directory not found"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi
        
        # Run the script from the project root
        python scripts/generate_knowledge_graph.py
        
        # Check if knowledge graph file was created
        if [ -f "data/knowledge_graph_embeddings.json" ]; then
          echo "✅ Knowledge graph data generated successfully"
          ls -la data/knowledge_graph_embeddings.json
        else
          echo "❌ Failed to generate knowledge graph data"
          exit 1
        fi

    - name: Update embedding service to use pre-generated data
      if: steps.check_changes.outputs.documents_changed == 'true' || steps.check_changes.outputs.force_regenerate == 'true'
      run: |
        echo "🔧 Updating embedding service to use pre-generated data..."
        
        # Create a backup of the original embedding service
        cp src/services/embedding-service.ts src/services/embedding-service.ts.backup
        
        # Update the embedding service to load from the generated file
        cat > src/services/embedding-service-precomputed.ts << 'EOF'
        import type { DocumentNode, EmbeddingData, TopicCluster } from '../types/knowledge-graph';

        export class EmbeddingService {
          private static instance: EmbeddingService;
          private precomputedData: any = null;

          static getInstance(): EmbeddingService {
            if (!EmbeddingService.instance) {
              EmbeddingService.instance = new EmbeddingService();
            }
            return EmbeddingService.instance;
          }

          async loadPrecomputedData(): Promise<void> {
            if (this.precomputedData) return;
            
            try {
              const response = await fetch('/tech_documents/data/knowledge_graph_embeddings.json');
              if (response.ok) {
                this.precomputedData = await response.json();
                console.log('Loaded precomputed knowledge graph data');
              }
            } catch (error) {
              console.warn('Failed to load precomputed data:', error);
            }
          }

          async checkOllamaConnection(): Promise<boolean> {
            // Always return false to use precomputed data
            return false;
          }

          async processDocuments(documents: DocumentNode[]): Promise<EmbeddingData> {
            await this.loadPrecomputedData();
            
            if (this.precomputedData?.embeddings) {
              return this.precomputedData.embeddings;
            }
            
            // Fallback to empty data
            return {};
          }

          generateTopicClusters(embeddings: EmbeddingData): TopicCluster[] {
            if (this.precomputedData?.clusters) {
              return this.precomputedData.clusters;
            }
            return [];
          }

          calculateSimilarity(embedding1: number[], embedding2: number[]): number {
            if (embedding1.length !== embedding2.length) return 0;
            
            let dotProduct = 0;
            let norm1 = 0;
            let norm2 = 0;
            
            for (let i = 0; i < embedding1.length; i++) {
              dotProduct += embedding1[i] * embedding2[i];
              norm1 += embedding1[i] * embedding1[i];
              norm2 += embedding2[i] * embedding2[i];
            }
            
            const magnitude = Math.sqrt(norm1) * Math.sqrt(norm2);
            return magnitude === 0 ? 0 : dotProduct / magnitude;
          }

          async saveEmbeddings(embeddings: EmbeddingData): Promise<void> {
            // No-op for precomputed data
          }

          loadCachedEmbeddings(): EmbeddingData | null {
            return this.precomputedData?.embeddings || null;
          }
        }
        EOF

    - name: Commit and push changes
      if: steps.check_changes.outputs.documents_changed == 'true' || steps.check_changes.outputs.force_regenerate == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the generated knowledge graph data
        git add data/knowledge_graph_embeddings.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️ No changes to commit"
        else
          git commit -m "🕸️ Auto-generate knowledge graph embeddings

          - Generated embeddings for $(jq length data/documents.json) documents
          - Created topic clusters and similarity links
          - Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          [skip ci]"
          
          git push
          echo "✅ Knowledge graph data committed and pushed"
        fi

    - name: Create deployment summary
      if: steps.check_changes.outputs.documents_changed == 'true' || steps.check_changes.outputs.force_regenerate == 'true'
      run: |
        echo "## 🕸️ Knowledge Graph Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "data/knowledge_graph_embeddings.json" ]; then
          TOTAL_DOCS=$(jq '.metadata.total_documents' data/knowledge_graph_embeddings.json)
          TOTAL_TOPICS=$(jq '.metadata.total_topics' data/knowledge_graph_embeddings.json)
          TOTAL_LINKS=$(jq '.metadata.total_links' data/knowledge_graph_embeddings.json)
          GENERATED_AT=$(jq -r '.metadata.generated_at' data/knowledge_graph_embeddings.json)
          
          echo "✅ **Knowledge graph data generated successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Documents processed:** $TOTAL_DOCS" >> $GITHUB_STEP_SUMMARY
          echo "- **Topic clusters:** $TOTAL_TOPICS" >> $GITHUB_STEP_SUMMARY
          echo "- **Similarity links:** $TOTAL_LINKS" >> $GITHUB_STEP_SUMMARY
          echo "- **Generated at:** $GENERATED_AT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The knowledge graph will be available on the next deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Failed to generate knowledge graph data**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Skip if no changes
      if: steps.check_changes.outputs.documents_changed != 'true' && steps.check_changes.outputs.force_regenerate != 'true'
      run: |
        echo "## ℹ️ Knowledge Graph Generation Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "No document changes detected. Knowledge graph generation was skipped." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To force regeneration, use the 'workflow_dispatch' trigger with 'force_regenerate' set to true." >> $GITHUB_STEP_SUMMARY
