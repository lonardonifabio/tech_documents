name: Build and Deploy Site

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.REP }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Check documents directory
      run: |
        echo "Checking documents directory..."
        ls -la documents/ || echo "Documents directory is empty or doesn't exist"
        echo "Total PDF files: $(find documents/ -name "*.pdf" | wc -l)"
    
    - name: Process documents
      run: |
        echo "Ensuring data files exist..."
        python scripts/ensure_data.py
        
        # Check if Ollama is available, if not, skip processing
        if command -v ollama >/dev/null 2>&1; then
          echo "Ollama found, attempting to process documents..."
          
          # Generate a random port to avoid conflicts
          OLLAMA_PORT=$((11434 + $RANDOM % 1000))
          echo "Using Ollama port: $OLLAMA_PORT"
          
          # Cleanup any existing processes
          sudo pkill -f ollama || true
          sleep 2
          
          # Try to start Ollama with custom port
          export OLLAMA_HOST=127.0.0.1:$OLLAMA_PORT
          export OLLAMA_ORIGINS="*"
          
          echo "Starting Ollama on port $OLLAMA_PORT..."
          timeout 30 ollama serve &
          OLLAMA_PID=$!
          
          # Wait briefly for Ollama to start
          sleep 5
          
          # Check if Ollama is responding
          if curl -s http://127.0.0.1:$OLLAMA_PORT/api/tags >/dev/null 2>&1; then
            echo "Ollama is ready, processing documents..."
            python scripts/fixed_ollama_processor.py || echo "Document processing failed, continuing with existing data"
          else
            echo "Ollama failed to start, using existing documents.json"
          fi
          
          # Clean up Ollama process
          kill $OLLAMA_PID 2>/dev/null || true
        else
          echo "Ollama not available, using existing documents.json"
        fi
        
        # Show results
        if [ -f "data/documents.json" ]; then
          echo "documents.json contains $(jq length data/documents.json) documents"
        else
          echo "No documents.json found, creating empty one"
          mkdir -p data
          echo "[]" > data/documents.json
        fi
        ls -la data/
        ls -la dist/data/ || echo "dist/data not created yet"
    
    - name: Build website
      run: |
        echo "Building website..."
        npm run build
        echo "Website built successfully"
        
        # Verify build
        ls -la dist/
        echo "Final documents.json contains $(jq length dist/data/documents.json) documents"
    
    - name: Commit updated files
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add .
        git stash
        
        # Pull latest changes to avoid conflicts
        git pull origin main --rebase
        
        # Add generated files
        git add data/documents.json data/processed_files.json
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          echo "Committing updated document database..."
          git commit -m "Auto-update documents database [skip ci]"
          git push origin main
        fi
    
    - name: Setup Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
