---
import Layout from '../layouts/Layout.astro';
import DocumentLibraryWithGraph from '../components/DocumentLibraryWithGraph';

// Load documents data for dynamic meta tags
let documents = [];
try {
  const fs = await import('fs/promises');
  const path = await import('path');
  const documentsPath = path.resolve(process.cwd(), 'data/documents.json');
  const data = await fs.readFile(documentsPath, 'utf-8');
  documents = JSON.parse(data);
} catch (error) {
  console.warn('Could not load documents for meta tags:', error);
}

const defaultTitle = "AI & Data Science Document Library";
const defaultDescription = "Automated AI/Data Science Document Library with 1100+ curated resources";
const baseUrl = "https://lonardonifabio.github.io/tech_documents";
const imageUrl = "https://www.fabiolonardoni.it/AIdatasciencelibrary_cover.JPG";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
    <link rel="manifest" href={`${import.meta.env.BASE_URL}manifest.json`} />
    
    <!-- Default meta tags -->
    <title>{defaultTitle}</title>
    <meta name="description" content={defaultDescription} />
    
    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-4EXW1VQ31D"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-4EXW1VQ31D');
    </script>

    <!-- Preload critical resources -->
    <link rel="preload" href={`${import.meta.env.BASE_URL}data/documents.json`} as="fetch" crossorigin="anonymous">
    
    <!-- Default Open Graph meta tags -->
    <meta property="og:title" content={defaultTitle}>
    <meta property="og:description" content={defaultDescription}>
    <meta property="og:type" content="website">
    <meta property="og:url" content={baseUrl}>
    <meta property="og:image" content={imageUrl}>
    <meta property="og:image:secure_url" content={imageUrl}>
    <meta property="og:image:type" content="image/jpeg">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:image:alt" content="AI & Data Science Document Library - Automated collection powered by AI">
    <meta property="og:site_name" content="AI & Data Science Document Library">
    <meta property="og:locale" content="en_US">
    
    <!-- LinkedIn specific optimizations -->
    <meta property="article:author" content="Fabio Lonardoni">
    <meta property="linkedin:owner" content="Fabio Lonardoni">
    <meta property="og:rich_attachment" content="true">
    
    <!-- Additional meta tags for better social sharing -->
    <meta name="author" content="Fabio Lonardoni">
    <meta name="robots" content="index, follow">
    <link rel="canonical" href={baseUrl}>
    
    <!-- Dynamic meta tag injection script -->
    <script define:vars={{ documents, baseUrl, imageUrl }}>
      // Function to update meta tags dynamically based on URL parameter
      function updateMetaTags() {
        const urlParams = new URLSearchParams(window.location.search);
        const docId = urlParams.get('doc');
        
        if (docId && documents) {
          // Find the document by ID
          const doc = documents.find(d => d.id === docId);
          
          if (doc) {
            // Update page title
            document.title = `${doc.title || doc.filename} - AI Document Library`;
            
            // Update meta description
            const descriptionMeta = document.querySelector('meta[name="description"]');
            if (descriptionMeta) {
              const description = doc.summary ? 
                (doc.summary.length > 300 ? doc.summary.substring(0, 297) + '...' : doc.summary) : 
                `Explore ${doc.title || doc.filename} - AI & Data Science Document from our curated library of 1100+ resources.`;
              descriptionMeta.content = description;
            }
            
            // Update Open Graph meta tags
            const ogTitle = document.querySelector('meta[property="og:title"]');
            if (ogTitle) {
              ogTitle.content = doc.title || doc.filename;
            }
            
            const ogDescription = document.querySelector('meta[property="og:description"]');
            if (ogDescription) {
              const description = doc.summary ? 
                (doc.summary.length > 300 ? doc.summary.substring(0, 297) + '...' : doc.summary) : 
                `Explore ${doc.title || doc.filename} - AI & Data Science Document from our curated library of 1100+ resources.`;
              ogDescription.content = description;
            }
            
            const ogUrl = document.querySelector('meta[property="og:url"]');
            if (ogUrl) {
              ogUrl.content = `${baseUrl}/?doc=${docId}`;
            }
            
            const ogType = document.querySelector('meta[property="og:type"]');
            if (ogType) {
              ogType.content = 'article';
            }
            
            // Update article-specific meta tags
            let articleSection = document.querySelector('meta[property="article:section"]');
            if (!articleSection) {
              articleSection = document.createElement('meta');
              articleSection.setAttribute('property', 'article:section');
              document.head.appendChild(articleSection);
            }
            articleSection.content = doc.category || 'AI & Data Science';
            
            let articleTag = document.querySelector('meta[property="article:tag"]');
            if (!articleTag) {
              articleTag = document.createElement('meta');
              articleTag.setAttribute('property', 'article:tag');
              document.head.appendChild(articleTag);
            }
            articleTag.content = doc.keywords ? doc.keywords.join(', ') : 'AI, Machine Learning, Data Science';
            
            let articlePublished = document.querySelector('meta[property="article:published_time"]');
            if (!articlePublished) {
              articlePublished = document.createElement('meta');
              articlePublished.setAttribute('property', 'article:published_time');
              document.head.appendChild(articlePublished);
            }
            articlePublished.content = doc.upload_date || new Date().toISOString();
            
            // Update canonical URL
            let canonical = document.querySelector('link[rel="canonical"]');
            if (canonical) {
              canonical.href = `${baseUrl}/?doc=${docId}`;
            }
            
            // Update keywords meta tag
            let keywords = document.querySelector('meta[name="keywords"]');
            if (!keywords) {
              keywords = document.createElement('meta');
              keywords.setAttribute('name', 'keywords');
              document.head.appendChild(keywords);
            }
            keywords.content = doc.keywords ? doc.keywords.join(', ') : 'AI, Machine Learning, Data Science';
            
            console.log('Meta tags updated for document:', doc.title || doc.filename);
          }
        }
      }
      
      // Update meta tags when page loads
      if (typeof window !== 'undefined') {
        // Run immediately
        updateMetaTags();
        
        // Also run when the URL changes (for SPA navigation)
        window.addEventListener('popstate', updateMetaTags);
        
        // Listen for custom events from the app when document selection changes
        window.addEventListener('documentChanged', updateMetaTags);
      }
    </script>
    
    <!-- Import Tailwind CSS and other styles -->
    <style is:global>
      html {
        font-family: system-ui, sans-serif;
      }
      
      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
      }
      
      ::-webkit-scrollbar-track {
        background: #f1f1f1;
      }
      
      ::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
      }
      
      ::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
      }

      /* Line clamp utilities */
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
      
      .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      /* Document preview styles */
      .document-preview {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 2rem;
        position: relative;
        overflow: hidden;
      }
      
      .document-preview::before {
        content: '';
        position: absolute;
        top: 10px;
        left: 10px;
        right: 10px;
        bottom: 10px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        border: 1px solid rgba(255, 255, 255, 0.2);
      }
      
      .document-preview::after {
        content: '';
        position: absolute;
        top: 20px;
        left: 20px;
        right: 20px;
        height: 2px;
        background: rgba(255, 255, 255, 0.3);
        box-shadow: 
          0 8px 0 rgba(255, 255, 255, 0.2),
          0 16px 0 rgba(255, 255, 255, 0.2),
          0 24px 0 rgba(255, 255, 255, 0.2);
      }

      /* Modal styles */
      .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 20px;
      }
      
      .modal-content {
        background: white;
        border-radius: 8px;
        width: 90vw;
        height: 90vh;
        max-width: 1200px;
        max-height: 800px;
        position: relative;
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      }
      
      .modal-header {
        padding: 16px 20px;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f9fafb;
        border-radius: 8px 8px 0 0;
      }
      
      .modal-body {
        height: calc(100% - 60px);
        padding: 0;
      }
      
      .modal-iframe {
        width: 100%;
        height: 100%;
        border: none;
        border-radius: 0 0 8px 8px;
      }
      
      .close-button {
        position: absolute;
        top: 12px;
        right: 16px;
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 18px;
        font-weight: bold;
        z-index: 10;
        transition: background-color 0.2s;
      }
      
      .close-button:hover {
        background: #dc2626;
      }

      /* LinkedIn brand colors */
      .bg-linkedin {
        background-color: #0077b5;
      }
      
      .bg-linkedin-dark {
        background-color: #005885;
      }
      
      .text-linkedin {
        color: #0077b5;
      }
    </style>
  </head>
  <body class="bg-gray-50 min-h-screen">
    <DocumentLibraryWithGraph initialView="library" client:load />
    
    <!-- Service Worker Registration -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
        navigator.serviceWorker.register(`${import.meta.env.BASE_URL}sw.js`)
            .then((registration) => {
              console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
              console.log('SW registration failed: ', registrationError);
            });
        });
      }
    </script>
  </body>
</html>
